/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package views.components;

/**
 *
 * @author rg
 */
public class FormTextField extends javax.swing.JPanel implements IFormField {
    
    String type;
    boolean required = false;
    String current = "";

    /**
     * Creates new form FormTextField
     */
    public FormTextField(String label, String curent, String type, boolean required) {
        this.type = type;
        this.required = required;
        this.current =  current;
        
        initComponents();
        lbl_label.setText(label);
        txt_field.setText(curent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_label = new javax.swing.JLabel();
        txt_field = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(500, 50));
        setLayout(new java.awt.BorderLayout());

        lbl_label.setText("jLabel1");
        lbl_label.setPreferredSize(new java.awt.Dimension(100, 45));
        add(lbl_label, java.awt.BorderLayout.LINE_START);

        txt_field.setText("jTextField1");
        add(txt_field, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lbl_label;
    private javax.swing.JTextField txt_field;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean validateField() {
        // NAND required and isEmpty
        return !(
                this.isRequired() &&
                ((String) this.getFieldContent()).equals("")
            );
    }

    @Override
    public boolean isRequired() {
        return required;
    }

    @Override
    public String getLabel() {
        StringBuilder label = new StringBuilder();
        if (this.isRequired()) label.append("* ");
        
        return "";
    }

    @Override
    public Object getFieldContent() {
        return this.txt_field.getText();
    }

    @Override
    public boolean wasModified() {
        return !((String) this.getFieldContent()).equals(this.current); 
    }
}
